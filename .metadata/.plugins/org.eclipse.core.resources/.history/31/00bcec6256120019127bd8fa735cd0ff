public class EmployeeBT {
EmployeeNode root;
int count =0, max =0;

public EmployeeNode getRoot() {
return this.root;	
}

//Add element in BT
public EmployeeNode addRecursive(EmployeeNode N, int value) {
    if (N == null) {
        return new EmployeeNode(value);
    }
 
    if (value < N.get_empid()) {
        N.left = addRecursive(N.left, value);
    } else if (value > N.get_empid()) {
        N.right = addRecursive(N.right, value);
    } else {
        // value already exists
    N.attCount=N.attCount+1;
    }
    System.out.println("N==");
    System.out.println(N.get_empid());
    return N;
    
}

public void add(int value) {
    root = addRecursive(root, value);
    System.out.println("root==");
    System.out.println(root.empId);
    System.out.println("Left==");
    System.out.println(root.left);
    System.out.println("Right==");
    System.out.println(root.right);
}

//Find employee in records (BT)
public boolean containsNodeRecursive(EmployeeNode N, int value) {
    if (N == null) {
        return false;
    } 
    if (value == N.get_empid()) {
        return true;
    } 
    //ternary operator
    return value < N.get_empid()
      ? containsNodeRecursive(N.left, value)
      : containsNodeRecursive(N.right, value);
}

//Search employee ID
public boolean searchID(int value) {
    return containsNodeRecursive(root, value);
}


//get the headcount

public int getHeadCount(EmployeeNode root) {
if	(root==null) {
	return count;
}
count = count +1;
count = getHeadCount(root.left);
count = getHeadCount(root.right);
//System.out.println("count==");
//System.out.println(count);
return count;
}


//How often

EmployeeNode get_employee_data(EmployeeNode N, int value) {	
	EmployeeNode P = N ;
	  if (P == null) {
	      return P;
	  } 
	  
	  if (value == P.get_empid()) {
	      return P;
	  } 
	  
	  
	  //ternary operator
	 System.out.println("n.getemp id======="+P.get_empid()); 
	  if (value < P.get_empid()) {
		  System.out.println("value is lesser");
		  get_employee_data(P.left, value);  
		  
	  } else if(value > P.get_empid()) {
		  System.out.println("value gretaer");
		  System.out.println("n.right"+P.right);
		  System.out.println("vALUE"+value);
		get_employee_data(P.right, value);
	  } else {
		  System.out.println("p1");
		  return P;
	  }
	  
	  System.out.println("p"+P);

	return P;
	  
	}



public int isPresent(EmployeeNode N, int value) {
//	System.out.println("N node=="+N.empId);	
	int returnVal=0;
	if (N == null) {
		System.out.println("N is null");
		return returnVal;
		
	} else if (N.empId == value){
		
		//				System.out.println("N node=="+N.empId);	
						System.out.println("value is equal");	
//						System.out.println("N node=="+N);
						returnVal = N.attCount;
						System.out.println("value matched");
						System.out.println("count is=="+returnVal);
					    return returnVal;
	}else {
	
		
						if(N.empId > value){
							// check if the sub trees
				//			System.out.println("N node=="+N.empId);	
							System.out.println("value is lesser");	
							returnVal=isPresent(N.left, value);
							return returnVal;
						} else if(N.empId < value) {
							
				//			System.out.println("N node=="+N.empId);	
							System.out.println("value is greater");	
							returnVal=isPresent(N.right, value);
							return returnVal;
						}
	}
						
		System.out.println("N emp=="+N.empId);	
	    System.out.println("returnVal=="+returnVal);	
	   return returnVal;
}

int howOften(EmployeeNode N, int value) {
	//System.out.println("root=="+root.empId);
	int x = isPresent(N, value);
	System.out.println("x value=="+x);	
	if (x % 2==0) {
			return (x/2);
	}else {
		return(x/2 + 1);
	}
	
}
	





//Frequent Visitor
//How often

EmployeeNode get_employee_max_vist(EmployeeNode N) {	
	EmployeeNode P = null;
	  if (N == null) {
	      return P;
	  } 
	  
	  if (root.get_count() >= max) {
	      max=root.get_count();
//	      System.out.println("Max Value==");
//	      System.out.println(max);
	  }
	  
	  //ternary operator
	  
	  if (max < root.get_empid()) {
		  get_employee_max_vist(root.left);  
	  } else {
		  get_employee_max_vist(root.right);
	  }
	  
	return P;
	  
	}



int frequentVisitor(EmployeeNode N){	
	EmployeeNode P = get_employee_max_vist(root);
	if (P==null) {
		return 0;
	}else {
//		System.out.println("EmplID==");
//		System.out.println(P.get_count());
		return P.get_count();	
		
	}
	
}
}

	